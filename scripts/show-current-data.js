/**
 * Êü•ËØ¢Âπ∂ÊòæÁ§∫ÂΩìÂâçÊï∞ÊçÆÂ∫ì‰∏≠ÁöÑÊâÄÊúâËÆæÂ§áÊï∞ÊçÆ
 */

const { Client } = require("pg");

const connectionString =
  "postgresql://postgres:Yxmsx123321.@sbp-a2e2xuudcasoe44t.supabase.opentrust.net:5432/postgres";

async function showCurrentData() {
  const client = new Client({ connectionString });

  try {
    console.log("üîå Ê≠£Âú®ËøûÊé•Âà∞Êï∞ÊçÆÂ∫ì...");
    await client.connect();
    console.log("‚úÖ ËøûÊé•ÊàêÂäüÔºÅ\n");

    // Êü•ËØ¢ÊâÄÊúâËÆæÂ§á
    const devicesResult = await client.query(`
      SELECT id, name, model, serial, printer_model_field, location, owner, status,
             cover_image, images, next_maintenance,
             printer_model, printer_paper, printer_connect, printer_paper_stock,
             printer_ink_c, printer_ink_m, printer_ink_y, printer_ink_k
      FROM devices
      ORDER BY name
    `);

    console.log("üìã ÂΩìÂâçÊï∞ÊçÆÂ∫ì‰∏≠ÁöÑËÆæÂ§áÔºö\n");
    console.log(
      "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
    );

    devicesResult.rows.forEach((device, index) => {
      console.log(`\n„ÄêËÆæÂ§á ${index + 1}„Äë`);
      console.log(`  ID: ${device.id}`);
      console.log(`  ÂêçÁß∞: ${device.name}`);
      console.log(`  ÂûãÂè∑: ${device.model}`);
      console.log(`  Â∫èÂàóÂè∑: ${device.serial}`);
      console.log(`  ÊâìÂç∞Êú∫ÂûãÂè∑: ${device.printer_model}`);
      console.log(`  ‰ΩçÁΩÆ: ${device.location}`);
      console.log(`  Ë¥üË¥£‰∫∫: ${device.owner}`);
      console.log(`  Áä∂ÊÄÅ: ${device.status}`);
      console.log(`  Â∞ÅÈù¢Âõæ: ${device.cover_image || "Êó†"}`);

      // ÂÆâÂÖ®Ëß£Êûê images Â≠óÊÆµ
      let imageCount = 0;
      try {
        if (device.images && device.images !== "") {
          const imagesArray =
            typeof device.images === "string"
              ? JSON.parse(device.images)
              : device.images;
          imageCount = Array.isArray(imagesArray) ? imagesArray.length : 0;
        }
      } catch (e) {
        console.log(`  ‚ö†Ô∏è  Áõ∏ÂÜåÂõæÁâáËß£ÊûêÈîôËØØ: ${e.message}`);
      }
      console.log(`  Áõ∏ÂÜåÂõæÁâáÊï∞: ${imageCount}`);
      console.log(`  Á∫∏Âº†: ${device.printer_paper}`);
      console.log(`  ËøûÊé•ÊñπÂºè: ${device.printer_connect}`);
      console.log(`  Á∫∏Âº†Â∫ìÂ≠ò: ${device.printer_paper_stock} Âº†`);
      console.log(
        `  Â¢®Ê∞¥ (CMYK): ${device.printer_ink_c}%, ${device.printer_ink_m}%, ${device.printer_ink_y}%, ${device.printer_ink_k}%`,
      );
      console.log(`  ‰∏ãÊ¨°Áª¥Êä§: ${device.next_maintenance}`);
    });

    console.log(
      "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
    );
    console.log(`\nÊÄªËÆ°: ${devicesResult.rows.length} Âè∞ËÆæÂ§á`);

    // Êü•ËØ¢Áª¥Êä§Êó•ÂøóÁªüËÆ°
    const logsResult = await client.query(`
      SELECT device_id, COUNT(*) as count
      FROM maintenance_logs
      GROUP BY device_id
      ORDER BY device_id
    `);

    console.log("\nüìù Áª¥Êä§Êó•ÂøóÁªüËÆ°Ôºö");
    logsResult.rows.forEach((row) => {
      const deviceName =
        devicesResult.rows.find((d) => d.id === row.device_id)?.name ||
        row.device_id;
      console.log(`  ${deviceName}: ${row.count} Êù°ËÆ∞ÂΩï`);
    });

    // Êü•ËØ¢ÊïÖÈöúËÆ∞ÂΩï
    const issuesResult = await client.query(`
      SELECT device_id, COUNT(*) as count
      FROM issues
      GROUP BY device_id
      ORDER BY device_id
    `);

    if (issuesResult.rows.length > 0) {
      console.log("\n‚ö†Ô∏è  ÊïÖÈöúËÆ∞ÂΩïÔºö");
      issuesResult.rows.forEach((row) => {
        const deviceName =
          devicesResult.rows.find((d) => d.id === row.device_id)?.name ||
          row.device_id;
        console.log(`  ${deviceName}: ${row.count} Êù°ËÆ∞ÂΩï`);
      });
    }

    console.log("\n");
  } catch (error) {
    console.error("‚ùå Êü•ËØ¢Â§±Ë¥•Ôºö", error.message);
  } finally {
    await client.end();
  }
}

showCurrentData();
